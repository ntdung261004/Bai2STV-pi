# file: main.py
import threading
import time
import logging
import queue
import evdev
import socketio
# Import t·ª´ c√°c module ƒë√£ t√°ch
from modules.camera import Camera
from modules.workers import TriggerListener, ProcessingWorker, StreamerWorker, CommandPoller, StatusReporterWorker
# Import module √¢m thanh m·ªõi
from modules.audio import audio_player

# --- C·∫§U H√åNH ---
# ... (To√†n b·ªô ph·∫ßn c·∫•u h√¨nh gi·ªØ nguy√™n)
SERVER_IP = "192.168.1.100"
SERVER_PORT = 5000
VIDEO_UPLOAD_URL = f"http://{SERVER_IP}:{SERVER_PORT}/pi/video_upload"
COMMAND_POLL_URL = f"http://{SERVER_IP}:{SERVER_PORT}/pi/get_command"
FPS = 25
TRIGGER_DEVICE_NAME = "AB Shutter"
TRIGGER_KEY_CODE = evdev.ecodes.KEY_VOLUMEDOWN
CAMERA_CAPTURE_WIDTH = 640
CAMERA_CAPTURE_HEIGHT = 480
FINAL_FRAME_WIDTH = 480
FINAL_FRAME_HEIGHT = 640

# BI·∫æN TR·∫†NG TH√ÅI PHI√äN B·∫ÆN
# =================================================================
session_lock = threading.Lock() # Lock ƒë·ªÉ b·∫£o v·ªá c√°c bi·∫øn n√†y
session_active = False
bullet_count = 0
SESSION_DURATION_SECONDS = 115 # V√≠ d·ª•: phi√™n k√©o d√†i 3 ph√∫t (180 gi√¢y)
session_end_time = None

# --- TR·∫†NG TH√ÅI TRUNG T√ÇM ---
# ... (Ph·∫ßn n√†y gi·ªØ nguy√™n)
state_lock = threading.Lock()
calibrated_center = {'x': FINAL_FRAME_WIDTH // 2, 'y': FINAL_FRAME_HEIGHT // 2}
current_zoom = 1.0
processing_queue = queue.Queue(maxsize=30)

# C·∫•u h√¨nh logging c∆° b·∫£n
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(threadName)s - %(levelname)s - %(message)s')
# --- H√ÄM QU·∫¢N L√ù TR·∫†NG TH√ÅI ---
# ... (Ph·∫ßn n√†y gi·ªØ nguy√™n)

# TH√äM M·ªöI: C·∫§U H√åNH SOCKETIO CLIENT
# =================================================================
sio = socketio.Client()

@sio.event
def connect():
    logging.info("‚úÖ ƒê√£ k·∫øt n·ªëi SocketIO t·ªõi server!")

@sio.event
def disconnect():
    logging.warning("‚ö†Ô∏è ƒê√£ m·∫•t k·∫øt n·ªëi SocketIO t·ªõi server.")
# =================================================================

# --- H√ÄM G·ª¨I TR·∫†NG TH√ÅI ---
def send_status_update(component, status):
    """G·ª≠i c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa m·ªôt th√†nh ph·∫ßn v·ªÅ server."""
    if sio.connected:
        logging.info(f"G·ª≠i tr·∫°ng th√°i: [{component}] -> {status}")
        sio.emit('status_update', {'component': component, 'status': status})

def get_current_state():
    return current_zoom, calibrated_center

def set_state_from_command(command):
    global current_zoom, calibrated_center
    command_type = command.get('type')
    command_value = command.get('value')
    with state_lock:
        if command_type == 'zoom':
            current_zoom = float(command_value)
            print(f"--- NH·∫¨N L·ªÜNH ZOOM: {current_zoom}x ---")
        elif command_type == 'center':
            relative_x = float(command_value['x'])
            relative_y = float(command_value['y'])
            zoom = current_zoom
            w, h = FINAL_FRAME_WIDTH, FINAL_FRAME_HEIGHT
            crop_w, crop_h = int(w / zoom), int(h / zoom)
            x1, y1 = (w - crop_w) // 2, (h - crop_h) // 2
            x_in_crop = relative_x * crop_w
            y_in_crop = relative_y * crop_h
            new_absolute_x = int(x1 + x_in_crop)
            new_absolute_y = int(y1 + y_in_crop)
            calibrated_center = {'x': new_absolute_x, 'y': new_absolute_y}
            print(f"--- T√ÇM M·ªöI (TR√äN KHUNG H√åNH G·ªêC): ({new_absolute_x}, {new_absolute_y}) ---")

# TH√äM M·ªöI: H√ÄM KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN B·∫ÆN V√Ä GI·∫¢M ƒê·∫†N
# =================================================================
def can_fire():
    """Ki·ªÉm tra t·∫•t c·∫£ ƒëi·ªÅu ki·ªán tr∆∞·ªõc khi cho ph√©p b·∫Øn."""
    with session_lock:
        if not session_active:
            logging.warning("B·∫Øn b·ªã t·ª´ ch·ªëi: Phi√™n ch∆∞a b·∫Øt ƒë·∫ßu.")
            return False
        
        if time.time() > session_end_time:
            logging.warning("B·∫Øn b·ªã t·ª´ ch·ªëi: ƒê√£ h·∫øt th·ªùi gian.")
            # T√πy ch·ªçn: T·ª± ƒë·ªông k·∫øt th√∫c phi√™n
            # global session_active
            # if session_active:
            #     session_active = False
            #     logging.info("="*20 + " PHI√äN B·∫ÆN K·∫æT TH√öC (H·∫æT GI·ªú) " + "="*20)
            return False
            
        if bullet_count <= 0:
            logging.warning("B·∫Øn b·ªã t·ª´ ch·ªëi: ƒê√£ h·∫øt ƒë·∫°n.")
            return False
            
        return True

def decrement_bullet():
    """Gi·∫£m s·ªë ƒë·∫°n ƒëi m·ªôt v√† g·ª≠i c·∫≠p nh·∫≠t v·ªÅ server."""
    global bullet_count
    with session_lock:
        if bullet_count > 0:
            bullet_count -= 1
            logging.info(f"ƒê·∫°n ƒë√£ b·∫Øn! S·ªë ƒë·∫°n c√≤n l·∫°i: {bullet_count}")
            # **S·ª¨A ƒê·ªîI**: G·ª≠i s·ªë ƒë·∫°n m·ªõi v·ªÅ server
            if sio.connected:
                sio.emit('update_ammo', {'ammo': bullet_count})
            
            if bullet_count == 0:
                logging.info("="*20 + " H·∫æT ƒê·∫†N " + "="*20)

def start_session():
    """K√≠ch ho·∫°t v√† reset c√°c th√¥ng s·ªë cho m·ªôt phi√™n b·∫Øn m·ªõi."""
    global session_active, bullet_count, session_end_time
    with session_lock:
        # B·ªè ƒëi·ªÅu ki·ªán "if not session_active" ƒë·ªÉ l·ªánh "start" lu√¥n reset l·∫°i phi√™n
        session_active = True
        bullet_count = 16
        session_end_time = time.time() + SESSION_DURATION_SECONDS
        
        logging.info("="*20 + " PHI√äN B·∫ÆN M·ªöI B·∫ÆT ƒê·∫¶U " + "="*20)
        logging.info(f"-> S·ªë ƒë·∫°n ƒë√£ n·∫°p: {bullet_count}")
        logging.info(f"-> Phi√™n s·∫Ω k·∫øt th√∫c l√∫c: {time.ctime(session_end_time)}")
        
        # G·ª≠i s·ªë ƒë·∫°n ban ƒë·∫ßu v·ªÅ giao di·ªán
        if sio.connected:
            sio.emit('update_ammo', {'ammo': bullet_count})
            # Ph√°t √¢m thanh "xu·∫•t ph√°t" tr√™n Pi
            #audio_player.play('start_sound') 
# =================================================================

# --- KH·ªûI CH·∫†Y CH∆Ø∆†NG TR√åNH ---
if __name__ == '__main__':
    try:
        sio.connect(f"http://{SERVER_IP}:{SERVER_PORT}")
    except socketio.exceptions.ConnectionError as e:
        logging.error(f"L·ªói k·∫øt n·ªëi SocketIO: {e}")

    audio_player.load_sound('shot', 'sounds/shot.mp3')
    camera = Camera(width=CAMERA_CAPTURE_WIDTH, height=CAMERA_CAPTURE_HEIGHT).start()
    logging.info(f"Camera ƒë√£ kh·ªüi ƒë·ªông.")
    time.sleep(2.0)

    # === S·ª¨A ƒê·ªîI L·ªöN: KH·ªûI T·∫†O C√ÅC WORKER ===
    
    # 1. Kh·ªüi t·∫°o c√°c worker ch√≠nh tr∆∞·ªõc
    streamer_worker = StreamerWorker(camera, VIDEO_UPLOAD_URL, state_lock, get_current_state, FPS)
    command_poller = CommandPoller(COMMAND_POLL_URL, set_state_from_command, start_session)
    trigger_listener = TriggerListener(
        TRIGGER_DEVICE_NAME, TRIGGER_KEY_CODE, camera, processing_queue, 
        state_lock, get_current_state, can_fire, decrement_bullet
    )
    processing_worker = ProcessingWorker(processing_queue)

    # 2. Kh·ªüi t·∫°o worker gi√°m s√°t, truy·ªÅn c√°c worker ch√≠nh v√†o cho n√≥
    status_reporter = StatusReporterWorker(send_status_update, trigger_listener, camera)

    # 3. Gom t·∫•t c·∫£ v√†o danh s√°ch ƒë·ªÉ kh·ªüi ch·∫°y
    threads = [
        streamer_worker,
        command_poller,
        trigger_listener,
        processing_worker,
        status_reporter # <-- Worker m·ªõi
    ]

    for t in threads:
        t.start()
    
    logging.info("‚úÖ T·∫•t c·∫£ c√°c lu·ªìng ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
    
    try:
        # V√≤ng l·∫∑p ch√≠nh gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("\nüõë Nh·∫≠n t√≠n hi·ªáu tho√°t, ch∆∞∆°ng tr√¨nh s·∫Ω k·∫øt th√∫c.")
    finally:
        if sio.connected:
            sio.disconnect()
        camera.stop()