# file: modules/workers.py
import threading
import time
import queue
import evdev
import requests
import cv2
import logging
import os
from datetime import datetime
from .utils import draw_crosshair_on_frame
# Import audio_player ƒë√£ t·∫°o
from .audio import audio_player

class StatusReporterWorker(threading.Thread):
    """
    M·ªôt lu·ªìng n·ªÅn chuy√™n gi√°m s√°t tr·∫°ng th√°i c·ªßa c√°c th√†nh ph·∫ßn kh√°c (camera, c√≤)
    v√† g·ª≠i b√°o c√°o ƒë·ªãnh k·ª≥ v·ªÅ server qua SocketIO.
    """
    def __init__(self, send_status_func, trigger_listener, camera, interval=2):
        super().__init__(daemon=True, name="StatusReporter")
        self.send_status_func = send_status_func
        self.trigger_listener = trigger_listener
        self.camera = camera
        self.interval = interval

    def run(self):
        logging.info("Lu·ªìng Gi√°m s√°t Tr·∫°ng th√°i b·∫Øt ƒë·∫ßu.")
        while True:
            # Ki·ªÉm tra tr·∫°ng th√°i C√≤ b·∫Øn
            if self.trigger_listener.is_connected():
                self.send_status_func('trigger', 'ready')
            else:
                self.send_status_func('trigger', 'disconnected')

            # Ki·ªÉm tra tr·∫°ng th√°i Camera
            if self.camera.is_running():
                self.send_status_func('video', 'ready')
            else:
                self.send_status_func('video', 'disconnected')
            
            time.sleep(self.interval)
            
class TriggerListener(threading.Thread):
    def __init__(self, device_name, key_code, camera, queue, state_lock, get_state_func, can_fire_func, decrement_bullet_func):
        super().__init__(daemon=True)
        self.device_name = device_name
        self.key_code = key_code
        self.camera = camera
        self.queue = queue
        self.device = None
        self.trigger_held = False
        self.state_lock = state_lock
        self.get_state_func = get_state_func
        self.can_fire_func = can_fire_func
        self.decrement_bullet_func = decrement_bullet_func
        self.burst_session_id = 0

    def is_connected(self):
        """H√†m ƒë·ªÉ worker kh√°c ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi."""
        return self.device is not None

    def find_device(self):
        devices = [evdev.InputDevice(path) for path in evdev.list_devices()]
        for device in devices:
            if self.device_name.lower() in device.name.lower():
                return device
        return None
    
    def fire_one_burst(self, current_burst_id):
        shot_in_burst_index = 0
        while self.trigger_held:
            if self.can_fire_func():
                self.decrement_bullet_func()

                with self.state_lock:
                    zoom, center = self.get_state_func()
                
                frame = self.camera.read()
                if frame is not None:
                    # =================================================================
                    # S·ª¨A L·ªñI: B·ªï sung l·∫°i c√°c key b·ªã thi·∫øu
                    # =================================================================
                    shot_id = f"{current_burst_id}-{shot_in_burst_index}"
                    shot_data = {
                        'frame': frame,
                        'timestamp': datetime.now(),
                        'shot_id': shot_id,           # ID duy nh·∫•t cho file ·∫£nh
                        'burst_id': current_burst_id, # ID cho th∆∞ m·ª•c lo·∫°t b·∫Øn
                        'shot_index': shot_in_burst_index, # Index c·ªßa ph√°t b·∫Øn
                        'zoom': zoom,
                        'center': center
                    }
                    # =================================================================
                    self.queue.put(shot_data)
                    audio_player.play('shot')
                
                shot_in_burst_index += 1
                time.sleep(0.1) 
            else:
                logging.warning("D·ª´ng lo·∫°t b·∫Øn do kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán (h·∫øt ƒë·∫°n/h·∫øt gi·ªù).")
                break

    def run(self):
        logging.info("ƒêang t√¨m ki·∫øm c√≤ b·∫Øn Bluetooth...")
        while True:
            try:
                if self.device is None:
                    # V√≤ng l·∫∑p t√¨m ki·∫øm, nh∆∞ng kh√¥ng g·ª≠i status ·ªü ƒë√¢y n·ªØa
                    self.device = self.find_device()
                    if self.device is None:
                        time.sleep(5)
                        continue
                    logging.info(f"‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi c√≤ b·∫Øn: {self.device.name}")
                    self.device.grab()
                for event in self.device.read_loop():
                    if event.type == evdev.ecodes.EV_KEY and event.code == self.key_code:
                        if event.value == 1 and not self.trigger_held:
                            self.trigger_held = True
                            self.burst_session_id += 1
                            threading.Thread(target=self.fire_one_burst, args=(self.burst_session_id,)).start()

                        elif event.value == 0:
                            self.trigger_held = False
            except (IOError, OSError) as e:
                logging.warning(f"‚ö†Ô∏è M·∫•t k·∫øt n·ªëi c√≤ b·∫Øn: {e}. ƒêang t√¨m ki·∫øm l·∫°i...")
                if self.device:
                    try:
                        self.device.ungrab()
                    except: pass # B·ªè qua l·ªói n·∫øu ungrab kh√¥ng th√†nh c√¥ng
                self.device = None # Quan tr·ªçng: ƒë·∫∑t l·∫°i device l√† None
                time.sleep(2) 
                              
class ProcessingWorker(threading.Thread):
    def __init__(self, queue):
        super().__init__(daemon=True)
        self.queue = queue
        self.base_captures_dir = "captures"
        os.makedirs(self.base_captures_dir, exist_ok=True)

    def run(self):
        print("üõ†Ô∏è  Lu·ªìng x·ª≠ l√Ω ·∫£nh ƒë√£ s·∫µn s√†ng...")
        while True:
            try:
                shot_data = self.queue.get()
                
                burst_id = shot_data["burst_id"]
                shot_id = shot_data["shot_id"]
                
                print(f"--- (Lo·∫°t {burst_id}, Ph√°t {shot_id})! --- ƒêang x·ª≠ l√Ω...")
                
                # T·∫°o th∆∞ m·ª•c con cho lo·∫°t b·∫Øn n·∫øu ch∆∞a c√≥
                burst_dir = os.path.join(self.base_captures_dir, f"burst_{burst_id}")
                os.makedirs(burst_dir, exist_ok=True)
                
                frame_to_process = shot_data["frame"]
                zoom_at_shot = shot_data["zoom"]
                center_at_shot = shot_data["center"]
                
                rotated_frame = cv2.rotate(frame_to_process, cv2.ROTATE_90_CLOCKWISE)
                final_image = draw_crosshair_on_frame(rotated_frame, zoom_at_shot, center_at_shot)
                
                # L∆∞u ·∫£nh v√†o th∆∞ m·ª•c con t∆∞∆°ng ·ª©ng
                filename = os.path.join(burst_dir, f"shot_{shot_id}.jpg")
                cv2.imwrite(filename, final_image)
                print(f"‚úÖ ƒê√£ x·ª≠ l√Ω v√† l∆∞u th√†nh c√¥ng file {filename}")

                self.queue.task_done()
            except Exception as e:
                print(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")

# ... (StreamerWorker v√† CommandPoller gi·ªØ nguy√™n kh√¥ng ƒë·ªïi) ...
class StreamerWorker(threading.Thread):
    def __init__(self, camera, upload_url, state_lock, get_state_func, fps):
        super().__init__(daemon=True, name="StreamerWorker")
        self.camera = camera
        self.upload_url = upload_url
        self.state_lock = state_lock
        self.get_state_func = get_state_func
        self.fps = fps

    def run(self):
        logging.info("Lu·ªìng g·ª≠i video b·∫Øt ƒë·∫ßu ho·∫°t ƒë·ªông.")
        while True:
            # **S·ª¨A L·ªñI QUAN TR·ªåNG**: Th√™m ki·ªÉm tra camera c√≥ ƒëang ch·∫°y kh√¥ng
            if not self.camera.is_running():
                time.sleep(1) # N·∫øu camera kh√¥ng ch·∫°y, ƒë·ª£i 1 gi√¢y r·ªìi ki·ªÉm tra l·∫°i
                continue

            original_frame = self.camera.read()
            # Ki·ªÉm tra l·∫°i m·ªôt l·∫ßn n·ªØa ph√≤ng tr∆∞·ªùng h·ª£p camera v·ª´a ng·∫Øt k·∫øt n·ªëi
            if original_frame is None:
                continue

            rotated_frame = cv2.rotate(original_frame, cv2.ROTATE_90_CLOCKWISE)
            with self.state_lock:
                zoom_level, center_point = self.get_state_func()
            
            frame_to_send = draw_crosshair_on_frame(rotated_frame, zoom_level, center_point)
            (flag, encodedImage) = cv2.imencode(".jpg", frame_to_send, [int(cv2.IMWRITE_JPEG_QUALITY), 90])
            if not flag:
                continue

            try:
                requests.post(self.upload_url, data=bytearray(encodedImage), headers={'Content-Type': 'image/jpeg'}, timeout=0.5)
            except requests.exceptions.RequestException:
                # L·ªói k·∫øt n·ªëi khi g·ª≠i ·∫£nh l√† b√¨nh th∆∞·ªùng, c√≥ th·ªÉ b·ªè qua log
                pass
            
            time.sleep(1 / self.fps)
            
class CommandPoller(threading.Thread):
    # S·ª¨A ƒê·ªîI: Th√™m start_session_func v√†o h√†m kh·ªüi t·∫°o
    def __init__(self, poll_url, set_state_func, start_session_func, reset_session_func):
        super().__init__(daemon=True)
        self.poll_url = poll_url
        self.set_state_func = set_state_func
        self.start_session_func = start_session_func # <-- L∆∞u l·∫°i h√†m ƒë∆∞·ª£c truy·ªÅn v√†o
        self.reset_session_func = reset_session_func
    def run(self):
        logging.info("B·∫Øt ƒë·∫ßu l·∫Øng nghe l·ªánh t·ª´ server...")
        while True:
            try:
                response = requests.get(self.poll_url, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    command = data.get('command')
                    if command:
                        command_type = command.get('type')
                        # Ph√¢n lo·∫°i v√† x·ª≠ l√Ω l·ªánh
                        if command_type == 'start':
                            logging.info("Nh·∫≠n ƒë∆∞·ª£c l·ªánh 'start'.")
                            self.start_session_func()
                        
                        # **TH√äM M·ªöI: X·ª≠ l√Ω l·ªánh 'reset'**
                        elif command_type == 'reset':
                            logging.info("Nh·∫≠n ƒë∆∞·ª£c l·ªánh 'reset'.")
                            self.reset_session_func() # G·ªçi h√†m reset t·ª´ main.py
                        
                        else:
                            # X·ª≠ l√Ω c√°c l·ªánh kh√°c nh∆∞ zoom, center
                            self.set_state_func(command)

            except requests.exceptions.RequestException:
                # L·ªói k·∫øt n·ªëi l√† b√¨nh th∆∞·ªùng khi server ch∆∞a b·∫≠t, n√™n ta c√≥ th·ªÉ b·ªè qua log n√†y
                pass
            time.sleep(1) # Ch·ªù 1 gi√¢y gi·ªØa m·ªói l·∫ßn h·ªèi